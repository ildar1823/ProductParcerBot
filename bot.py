import os
import logging
import requests
from bs4 import BeautifulSoup
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext, ConversationHandler
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
import json
import time
from datetime import datetime
import re
import flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SETTING_PRODUCT, SETTING_PRICE, SETTING_SITE = range(3)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
PRODUCTS_FILE = "products.json"
SITES_FILE = "sites.json"
CONFIG_FILE = "config.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
application = None

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data(filename, default=[]):
    try:
        if os.path.exists(filename):
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"Error loading {filename}: {e}")
    return default

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(filename, data):
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Error saving {filename}: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    return load_data(CONFIG_FILE, {"chat_id": None})

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(config):
    save_data(CONFIG_FILE, config)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
def load_products():
    return load_data(PRODUCTS_FILE, [])

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
def save_products(products):
    save_data(PRODUCTS_FILE, products)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–æ–≤
def load_sites():
    return load_data(SITES_FILE, [])

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∞–π—Ç–æ–≤
def save_sites(sites):
    save_data(SITES_FILE, sites)

# –ü–∞—Ä—Å–µ—Ä Ozon
def parse_ozon(product_name, max_price):
    try:
        search_query = product_name.replace(' ', '%20')
        url = f"https://www.ozon.ru/search/?text={search_query}"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        products = []
        
        # –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        items = soup.find_all('div', {'class': 'tile-root'}) or soup.find_all('div', {'class': 'widget-search-result-container'})
        
        for item in items[:10]:
            try:
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                name_elem = item.find('a', {'class': 'tile-hover-target'}) or item.find('span', {'class': 'tsBody500Medium'})
                if not name_elem:
                    continue
                
                name = name_elem.get_text(strip=True)
                if product_name.lower() not in name.lower():
                    continue
                
                # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
                price_elem = item.find('span', {'class': 'tsHeadline500Medium'}) or item.find('span', {'class': 'c3118-a0'})
                if not price_elem:
                    continue
                
                price_text = price_elem.get_text(strip=True).replace(' ', '').replace('‚ÇΩ', '').replace(',', '.')
                price = float(''.join([c for c in price_text if c.isdigit() or c == '.']))
                
                if price > max_price:
                    continue
                
                # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
                link_elem = item.find('a', href=True)
                if link_elem:
                    link = 'https://www.ozon.ru' + link_elem['href'] if link_elem['href'].startswith('/') else link_elem['href']
                else:
                    continue
                
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                img_elem = item.find('img', src=True) or item.find('img', {'data-src': True})
                img_url = None
                if img_elem:
                    img_url = img_elem.get('src') or img_elem.get('data-src')
                    if img_url and img_url.startswith('//'):
                        img_url = 'https:' + img_url
                
                products.append({
                    'name': name,
                    'price': price,
                    'link': link,
                    'image': img_url,
                    'found_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                })
                
            except Exception as e:
                continue
                
        return products
        
    except Exception as e:
        logger.error(f"Error parsing Ozon: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
def check_products():
    try:
        config = load_config()
        if not config.get('chat_id'):
            return
        
        products = load_products()
        sites = load_sites()
        
        if not products or not sites:
            return
        
        found_products = []
        
        for product in products:
            for site in sites:
                if site['name'] == 'ozon.ru':
                    results = parse_ozon(product['name'], product['max_price'])
                    
                    for result in results:
                        result['product'] = product['name']
                        result['site'] = site['name']
                        found_products.append(result)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        for product in found_products:
            message = (
                f"üéØ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä!\n\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product['product']}\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {product['site']}\n"
                f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"‚è∞ –ù–∞–π–¥–µ–Ω–æ: {product['found_at']}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {product['link']}"
            )
            
            try:
                if application:
                    if product.get('image'):
                        application.bot.send_photo(
                            chat_id=config['chat_id'],
                            photo=product['image'],
                            caption=message
                        )
                    else:
                        application.bot.send_message(
                            chat_id=config['chat_id'],
                            text=message
                        )
                    time.sleep(1)
            except Exception as e:
                logger.error(f"Error sending message: {e}")
                
    except Exception as e:
        logger.error(f"Error in check_products: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    keyboard = [
        ['üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã', 'üè™ –ú–æ–∏ —Å–∞–π—Ç—ã'],
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç'],
        ['üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = load_config()
    config['chat_id'] = update.effective_chat.id
    save_config(config)
    
    await update.message.reply_text(
        "ü§ñ –£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7! üéâ\n\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=main_keyboard()
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products = load_products()
    
    if not products:
        await update.message.reply_text("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'")
        return
    
    message = "üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
    for i, product in enumerate(products, 1):
        message += f"{i}. {product['name']} - –¥–æ {product['max_price']} —Ä—É–±.\n"
    
    message += "\n‚ùå –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /delete_product –Ω–æ–º–µ—Ä"
    await update.message.reply_text(message)

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤
async def show_sites(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sites = load_sites()
    
    if not sites:
        await update.message.reply_text("üè™ –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç'")
        return
    
    message = "üè™ –í–∞—à–∏ —Å–∞–π—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n"
    for i, site in enumerate(sites, 1):
        message += f"{i}. {site['name']}\n"
    
    message += "\n‚ùå –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /delete_site –Ω–æ–º–µ—Ä"
    await update.message.reply_text(message)

# –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    return SETTING_PRODUCT

# –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def add_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_product'] = {'name': update.message.text}
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")
    return SETTING_PRICE

# –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
async def add_product_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = float(update.message.text)
        product = context.user_data['new_product']
        product['max_price'] = price
        
        products = load_products()
        products.append(product)
        save_products(products)
        
        await update.message.reply_text(
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"üì¶ {product['name']}\n"
            f"üí∞ –î–æ {price} —Ä—É–±.",
            reply_markup=main_keyboard()
        )
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")
        return SETTING_PRICE

# –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞
async def add_site_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ozon.ru):",
        reply_markup=ReplyKeyboardRemove()
    )
    return SETTING_SITE

# –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–π—Ç
async def add_site_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    site_name = update.message.text.lower().strip()
    
    sites = load_sites()
    
    if any(site['name'] == site_name for site in sites):
        await update.message.reply_text(
            f"‚ùå –°–∞–π—Ç {site_name} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=main_keyboard()
        )
        return ConversationHandler.END
    
    sites.append({'name': site_name})
    save_sites(sites)
    
    await update.message.reply_text(
        f"‚úÖ –°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\nüè™ {site_name}",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

# –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
async def delete_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        products = load_products()
        if not products:
            await update.message.reply_text("üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
            return
        
        text = update.message.text
        match = re.search(r'/delete_product\s+(\d+)', text)
        if not match:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_product –Ω–æ–º–µ—Ä")
            return
        
        index = int(match.group(1)) - 1
        
        if 0 <= index < len(products):
            deleted_product = products.pop(index)
            save_products(products)
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω:\nüì¶ {deleted_product['name']}"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
            
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.")

# –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç
async def delete_site(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        sites = load_sites()
        if not sites:
            await update.message.reply_text("üè™ –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç.")
            return
        
        text = update.message.text
        match = re.search(r'/delete_site\s+(\d+)', text)
        if not match:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_site –Ω–æ–º–µ—Ä")
            return
        
        index = int(match.group(1)) - 1
        
        if 0 <= index < len(sites):
            deleted_site = sites.pop(index)
            save_sites(sites)
            await update.message.reply_text(
                f"‚úÖ –°–∞–π—Ç —É–¥–∞–ª–µ–Ω:\nüè™ {deleted_site['name']}"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∞–π—Ç–∞.")
            
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞.")

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å
async def check_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
    check_products()

# –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    products = load_products()
    sites = load_sites()
    
    message = (
        f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}\n"
        f"üè™ –°–∞–π—Ç–æ–≤: {len(sites)}\n"
        f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 30 –º–∏–Ω—É—Ç\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã\n"
        f"üöÄ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 24/7 –≤—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω!"
    )
    
    await update.message.reply_text(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == 'üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã':
        await show_products(update, context)
    elif text == 'üè™ –ú–æ–∏ —Å–∞–π—Ç—ã':
        await show_sites(update, context)
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
        await add_product_start(update, context)
        return SETTING_PRODUCT
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç':
        await add_site_start(update, context)
        return SETTING_SITE
    elif text == 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å':
        await check_now(update, context)
    elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await show_settings(update, context)
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º!",
            reply_markup=main_keyboard()
        )

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_keyboard()
    )
    return ConversationHandler.END

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def init_scheduler():
    scheduler = BackgroundScheduler()
    scheduler.add_job(
        check_products,
        trigger=IntervalTrigger(minutes=30),
        id='check_products_job',
        replace_existing=True
    )
    scheduler.start()
    logger.info("Scheduler started - checking every 30 minutes")

# –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app = flask.Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Telegram Parser Bot is running 24/7! üöÄ"

@app.route('/health')
def health():
    return "OK", 200

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    global application
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    init_scheduler()
    
    # –í–°–¢–ê–í–¨–¢–ï –°–í–û–ô –¢–û–ö–ï–ù –ó–î–ï–°–¨!
    TOKEN = "7973881475:AAFLHxTpK5zudwv1LLmuFvNxUmW-3W9BjK8"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä$'), add_product_start)
        ],
        states={
            SETTING_PRODUCT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_name)],
            SETTING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_price)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–≤
    conv_handler_sites = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç$'), add_site_start)
        ],
        states={
            SETTING_SITE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_site_name)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("check", check_now))
    application.add_handler(CommandHandler("settings", show_settings))
    application.add_handler(CommandHandler("delete_product", delete_product))
    application.add_handler(CommandHandler("delete_site", delete_site))
    application.add_handler(conv_handler)
    application.add_handler(conv_handler_sites)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Bot starting...")
    application.run_polling()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    from threading import Thread
    Thread(target=lambda: app.run(host='0.0.0.0', port=os.environ.get('PORT', 5000), debug=False)).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    main()
